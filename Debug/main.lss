
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000d7c  00000e10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014a  0080014a  00000e5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017da  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be3  00000000  00000000  000028aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c74  00000000  00000000  0000348d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00004104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065a  00000000  00000000  000044e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001133  00000000  00000000  00004b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00005c71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  9e:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <interrupt_fn>:

//check the state of the car's traffic light

static void interrupt_fn()
{
	if(state != RED)
  a6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <state>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	19 f0       	breq	.+6      	; 0xb4 <interrupt_fn+0xe>
	{
		interruptfn1();
  ae:	0e 94 bc 03 	call	0x778	; 0x778 <interruptfn1>
  b2:	08 95       	ret
	}
	else
	{
		interruptfn2();
  b4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <interruptfn2>
  b8:	08 95       	ret

000000ba <APP_init>:

EN_CARLEDSTATE state;

void APP_init()
{
	init_leds();
  ba:	0e 94 22 03 	call	0x644	; 0x644 <init_leds>
  be:	08 95       	ret

000000c0 <APP_start>:
		8. wait for 5 seconds
	this will be done periodically until an interrupt  
*/

void APP_start()
{
  c0:	cf 93       	push	r28
	state = GREEN;
  c2:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <state>
	car_GREENLED_ON();
  c6:	0e 94 ac 03 	call	0x758	; 0x758 <car_GREENLED_ON>
	state = YELLOW;
  ca:	c1 e0       	ldi	r28, 0x01	; 1
  cc:	c0 93 4b 01 	sts	0x014B, r28	; 0x80014b <state>
	carYELLOWLED_BLINKING();
  d0:	0e 94 77 03 	call	0x6ee	; 0x6ee <carYELLOWLED_BLINKING>
	state = RED;
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <state>
	car_REDLED_ON();
  da:	0e 94 b4 03 	call	0x768	; 0x768 <car_REDLED_ON>
	state = YELLOW;
  de:	c0 93 4b 01 	sts	0x014B, r28	; 0x80014b <state>
	carYELLOWLED_BLINKING();
  e2:	0e 94 77 03 	call	0x6ee	; 0x6ee <carYELLOWLED_BLINKING>
}
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <__vector_1>:
			4. the yellow led will blink for 5 seconds
		back again to the normal operation
*/

ISR(EXT_INT_0)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
	if(intial == 1)
 10c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <intial>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	49 f4       	brne	.+18     	; 0x126 <__vector_1+0x3c>
	{
		BUTTON_isLongPress(2, PORT_D, interrupt_fn);	
 114:	43 e5       	ldi	r20, 0x53	; 83
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	64 e4       	ldi	r22, 0x44	; 68
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 ae 00 	call	0x15c	; 0x15c <BUTTON_isLongPress>
 124:	03 c0       	rjmp	.+6      	; 0x12c <__vector_1+0x42>
	}
	else
	{
		intial++;
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <intial>
	}
}
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	5f 91       	pop	r21
 13e:	4f 91       	pop	r20
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <BUTTON_init>:


//INTIALIZING BUTTON
void BUTTON_init(uint8_t pinNum, uint8_t portNum)
{
	DIO_init(pinNum,portNum, IN);
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_init>
 154:	08 95       	ret

00000156 <BUTTON_start>:
}

//STARTING BUTTON
void BUTTON_start(uint8_t pinNum, uint8_t portNum, uint8_t *value)
{
	DIO_read(pinNum,portNum, value);
 156:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_read>
 15a:	08 95       	ret

0000015c <BUTTON_isLongPress>:
		.call the passed function and finish the function (single short press)
	4. if the state of INT0 stay 1 until the iterations finishes
		. do nothing
*/
void BUTTON_isLongPress(uint8_t pinNum, uint8_t portNum, void (*fn)())
{
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	08 2f       	mov	r16, r24
 16a:	16 2f       	mov	r17, r22
 16c:	7a 01       	movw	r14, r20
	uint8_t *val = 0;
	for (int i = 0; i<= 10000; i++)
 16e:	c0 e0       	ldi	r28, 0x00	; 0
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	0e c0       	rjmp	.+28     	; 0x190 <BUTTON_isLongPress+0x34>
	{
		BUTTON_start(pinNum, portNum, val);
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	61 2f       	mov	r22, r17
 17a:	80 2f       	mov	r24, r16
 17c:	0e 94 ab 00 	call	0x156	; 0x156 <BUTTON_start>
		if(*val == 0)
 180:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
 184:	81 11       	cpse	r24, r1
 186:	03 c0       	rjmp	.+6      	; 0x18e <BUTTON_isLongPress+0x32>
		{
			fn();
 188:	f7 01       	movw	r30, r14
 18a:	09 95       	icall
			return ;
 18c:	05 c0       	rjmp	.+10     	; 0x198 <BUTTON_isLongPress+0x3c>
		. do nothing
*/
void BUTTON_isLongPress(uint8_t pinNum, uint8_t portNum, void (*fn)())
{
	uint8_t *val = 0;
	for (int i = 0; i<= 10000; i++)
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	c1 31       	cpi	r28, 0x11	; 17
 192:	f7 e2       	ldi	r31, 0x27	; 39
 194:	df 07       	cpc	r29, r31
 196:	74 f3       	brlt	.-36     	; 0x174 <BUTTON_isLongPress+0x18>
		{
			fn();
			return ;
		}
	}
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	08 95       	ret

000001a6 <LED_init>:

#include "led.h"
// initiate the led by passing the pin number & port number
void LED_init(uint8_t pinNum , uint8_t portNum)
{
	DIO_init(pinNum, portNum, OUT);
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_init>
 1ac:	08 95       	ret

000001ae <LED_on>:
}

// make the led on by passing the pin number and port number after initializing it
void LED_on(uint8_t pinNum, uint8_t portNum)
{
	DIO_write(pinNum,portNum, HIGH);
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_write>
 1b4:	08 95       	ret

000001b6 <LED_off>:
}

// make the led off by passing the pin number and port number after initializing it
void LED_off(uint8_t pinNum , uint8_t portNum)
{
	DIO_write(pinNum,portNum, LOW);
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_write>
 1bc:	08 95       	ret

000001be <LED_toggle>:
}

// make the led toggling by passing the pin number and port number after initializing it
void LED_toggle(uint8_t pinNum, uint8_t portNum)
{
	DIO_toggle(pinNum,portNum);
 1be:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_toggle>
 1c2:	08 95       	ret

000001c4 <main>:
#include "Application/app.h"

int main(void)
{
    /* Replace with your application code */
	APP_init();
 1c4:	0e 94 5d 00 	call	0xba	; 0xba <APP_init>
	
    while (1) 
    {
		APP_start();
 1c8:	0e 94 60 00 	call	0xc0	; 0xc0 <APP_start>
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <main+0x4>

000001ce <DIO_init>:
		and if it is out make the pin an output
*/

void DIO_init(uint8_t pinNum, uint8_t portNum, uint8_t direction)
{
	switch(portNum)
 1ce:	63 34       	cpi	r22, 0x43	; 67
 1d0:	71 f1       	breq	.+92     	; 0x22e <DIO_init+0x60>
 1d2:	64 34       	cpi	r22, 0x44	; 68
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <DIO_init+0xa>
 1d6:	53 c0       	rjmp	.+166    	; 0x27e <DIO_init+0xb0>
 1d8:	62 34       	cpi	r22, 0x42	; 66
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_init+0x10>
 1dc:	78 c0       	rjmp	.+240    	; 0x2ce <DIO_init+0x100>
	{
		case PORT_B:
			if(direction == IN)
 1de:	41 11       	cpse	r20, r1
 1e0:	0e c0       	rjmp	.+28     	; 0x1fe <DIO_init+0x30>
				CLEAR_BIT(DDRB, pinNum);
 1e2:	44 b1       	in	r20, 0x04	; 4
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	b9 01       	movw	r22, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_init+0x22>
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	8a 95       	dec	r24
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_init+0x1e>
 1f4:	cb 01       	movw	r24, r22
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	84 b9       	out	0x04, r24	; 4
 1fc:	08 95       	ret
			else if(direction == OUT)
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	69 f4       	brne	.+26     	; 0x21c <DIO_init+0x4e>
				SET_BIT(DDRB, pinNum);
 202:	44 b1       	in	r20, 0x04	; 4
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_init+0x42>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_init+0x3e>
 214:	cb 01       	movw	r24, r22
 216:	84 2b       	or	r24, r20
 218:	84 b9       	out	0x04, r24	; 4
 21a:	08 95       	ret
			else
				printf("Wrong direction");
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	9f 93       	push	r25
 222:	8f 93       	push	r24
 224:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	08 95       	ret
		break;
		case PORT_C :
			if(direction == IN)
 22e:	41 11       	cpse	r20, r1
 230:	0e c0       	rjmp	.+28     	; 0x24e <DIO_init+0x80>
				CLEAR_BIT(DDRC, pinNum);
 232:	47 b1       	in	r20, 0x07	; 7
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	b9 01       	movw	r22, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_init+0x72>
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	8a 95       	dec	r24
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_init+0x6e>
 244:	cb 01       	movw	r24, r22
 246:	80 95       	com	r24
 248:	84 23       	and	r24, r20
 24a:	87 b9       	out	0x07, r24	; 7
 24c:	08 95       	ret
			else if(direction == OUT)
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	69 f4       	brne	.+26     	; 0x26c <DIO_init+0x9e>
				SET_BIT(DDRC, pinNum);
 252:	47 b1       	in	r20, 0x07	; 7
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	b9 01       	movw	r22, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_init+0x92>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_init+0x8e>
 264:	cb 01       	movw	r24, r22
 266:	84 2b       	or	r24, r20
 268:	87 b9       	out	0x07, r24	; 7
 26a:	08 95       	ret
			else
				printf("Wrong direction");
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	9f 93       	push	r25
 272:	8f 93       	push	r24
 274:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	08 95       	ret
		break;
		case PORT_D:
			if(direction == IN)
 27e:	41 11       	cpse	r20, r1
 280:	0e c0       	rjmp	.+28     	; 0x29e <DIO_init+0xd0>
				CLEAR_BIT(DDRD, pinNum);
 282:	4a b1       	in	r20, 0x0a	; 10
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	b9 01       	movw	r22, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_init+0xc2>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	8a 95       	dec	r24
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_init+0xbe>
 294:	cb 01       	movw	r24, r22
 296:	80 95       	com	r24
 298:	84 23       	and	r24, r20
 29a:	8a b9       	out	0x0a, r24	; 10
 29c:	08 95       	ret
			else if(direction == OUT)
 29e:	41 30       	cpi	r20, 0x01	; 1
 2a0:	69 f4       	brne	.+26     	; 0x2bc <DIO_init+0xee>
				SET_BIT(DDRD, pinNum);
 2a2:	4a b1       	in	r20, 0x0a	; 10
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	b9 01       	movw	r22, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_init+0xe2>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_init+0xde>
 2b4:	cb 01       	movw	r24, r22
 2b6:	84 2b       	or	r24, r20
 2b8:	8a b9       	out	0x0a, r24	; 10
 2ba:	08 95       	ret
			else
				printf("Wrong direction");
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	9f 93       	push	r25
 2c2:	8f 93       	push	r24
 2c4:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	08 95       	ret
		break;
		default:
			printf("Unavailable Port !!");
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	9f 93       	push	r25
 2d4:	8f 93       	push	r24
 2d6:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
		break;
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	08 95       	ret

000002e0 <DIO_write>:
*/

//WRITE FUN
void DIO_write(uint8_t pinNum, uint8_t portNum, uint8_t value)
{
	switch(portNum)
 2e0:	63 34       	cpi	r22, 0x43	; 67
 2e2:	71 f1       	breq	.+92     	; 0x340 <DIO_write+0x60>
 2e4:	64 34       	cpi	r22, 0x44	; 68
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_write+0xa>
 2e8:	53 c0       	rjmp	.+166    	; 0x390 <DIO_write+0xb0>
 2ea:	62 34       	cpi	r22, 0x42	; 66
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <DIO_write+0x10>
 2ee:	78 c0       	rjmp	.+240    	; 0x3e0 <DIO_write+0x100>
	{
		case  PORT_B:
			if(value == LOW)
 2f0:	41 11       	cpse	r20, r1
 2f2:	0e c0       	rjmp	.+28     	; 0x310 <DIO_write+0x30>
				CLEAR_BIT(PORTB, pinNum);
 2f4:	45 b1       	in	r20, 0x05	; 5
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	b9 01       	movw	r22, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_write+0x22>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	8a 95       	dec	r24
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_write+0x1e>
 306:	cb 01       	movw	r24, r22
 308:	80 95       	com	r24
 30a:	84 23       	and	r24, r20
 30c:	85 b9       	out	0x05, r24	; 5
 30e:	08 95       	ret
			else if(value == HIGH)
 310:	41 30       	cpi	r20, 0x01	; 1
 312:	69 f4       	brne	.+26     	; 0x32e <DIO_write+0x4e>
				SET_BIT(PORTB, pinNum);
 314:	45 b1       	in	r20, 0x05	; 5
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	b9 01       	movw	r22, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_write+0x42>
 31e:	66 0f       	add	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	8a 95       	dec	r24
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_write+0x3e>
 326:	cb 01       	movw	r24, r22
 328:	84 2b       	or	r24, r20
 32a:	85 b9       	out	0x05, r24	; 5
 32c:	08 95       	ret
			else
				printf("Wrong Value");
 32e:	84 e2       	ldi	r24, 0x24	; 36
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	9f 93       	push	r25
 334:	8f 93       	push	r24
 336:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	08 95       	ret
		break;
		case  PORT_C:
			if(value == LOW)
 340:	41 11       	cpse	r20, r1
 342:	0e c0       	rjmp	.+28     	; 0x360 <DIO_write+0x80>
				CLEAR_BIT(PORTC, pinNum);
 344:	48 b1       	in	r20, 0x08	; 8
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	b9 01       	movw	r22, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_write+0x72>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	8a 95       	dec	r24
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_write+0x6e>
 356:	cb 01       	movw	r24, r22
 358:	80 95       	com	r24
 35a:	84 23       	and	r24, r20
 35c:	88 b9       	out	0x08, r24	; 8
 35e:	08 95       	ret
			else if(value == HIGH)
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	69 f4       	brne	.+26     	; 0x37e <DIO_write+0x9e>
				SET_BIT(PORTC, pinNum);
 364:	48 b1       	in	r20, 0x08	; 8
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	b9 01       	movw	r22, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_write+0x92>
 36e:	66 0f       	add	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	8a 95       	dec	r24
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_write+0x8e>
 376:	cb 01       	movw	r24, r22
 378:	84 2b       	or	r24, r20
 37a:	88 b9       	out	0x08, r24	; 8
 37c:	08 95       	ret
			else
				printf("Wrong Value");
 37e:	84 e2       	ldi	r24, 0x24	; 36
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	9f 93       	push	r25
 384:	8f 93       	push	r24
 386:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	08 95       	ret
		break;
		case  PORT_D:
			if(value == LOW)
 390:	41 11       	cpse	r20, r1
 392:	0e c0       	rjmp	.+28     	; 0x3b0 <DIO_write+0xd0>
				CLEAR_BIT(PORTD, pinNum);
 394:	4b b1       	in	r20, 0x0b	; 11
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	b9 01       	movw	r22, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_write+0xc2>
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	8a 95       	dec	r24
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_write+0xbe>
 3a6:	cb 01       	movw	r24, r22
 3a8:	80 95       	com	r24
 3aa:	84 23       	and	r24, r20
 3ac:	8b b9       	out	0x0b, r24	; 11
 3ae:	08 95       	ret
			else if(value == HIGH)
 3b0:	41 30       	cpi	r20, 0x01	; 1
 3b2:	69 f4       	brne	.+26     	; 0x3ce <DIO_write+0xee>
				SET_BIT(PORTD, pinNum);
 3b4:	4b b1       	in	r20, 0x0b	; 11
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_write+0xe2>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	8a 95       	dec	r24
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_write+0xde>
 3c6:	cb 01       	movw	r24, r22
 3c8:	84 2b       	or	r24, r20
 3ca:	8b b9       	out	0x0b, r24	; 11
 3cc:	08 95       	ret
			else
				printf("Wrong Value");
 3ce:	84 e2       	ldi	r24, 0x24	; 36
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	9f 93       	push	r25
 3d4:	8f 93       	push	r24
 3d6:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	08 95       	ret
		break;
		default:
			printf("Unavailable Port !!");
 3e0:	80 e1       	ldi	r24, 0x10	; 16
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	9f 93       	push	r25
 3e6:	8f 93       	push	r24
 3e8:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
		break;
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	08 95       	ret

000003f2 <DIO_toggle>:
*/

// TOGGLE
void DIO_toggle(uint8_t pinNum, uint8_t portNum)
{
		switch (portNum)
 3f2:	63 34       	cpi	r22, 0x43	; 67
 3f4:	89 f0       	breq	.+34     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3f6:	64 34       	cpi	r22, 0x44	; 68
 3f8:	e1 f0       	breq	.+56     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3fa:	62 34       	cpi	r22, 0x42	; 66
 3fc:	39 f5       	brne	.+78     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		{
			case PORT_B:
				TOGGLE_BIT(PORTB,pinNum);
 3fe:	45 b1       	in	r20, 0x05	; 5
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	b9 01       	movw	r22, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	8a 95       	dec	r24
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	cb 01       	movw	r24, r22
 412:	84 27       	eor	r24, r20
 414:	85 b9       	out	0x05, r24	; 5
			break;
 416:	08 95       	ret
			case PORT_C:
				TOGGLE_BIT(PORTC,pinNum);
 418:	48 b1       	in	r20, 0x08	; 8
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	8a 95       	dec	r24
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	cb 01       	movw	r24, r22
 42c:	84 27       	eor	r24, r20
 42e:	88 b9       	out	0x08, r24	; 8
			break;
 430:	08 95       	ret
			case PORT_D:
				TOGGLE_BIT(PORTD,pinNum);
 432:	4b b1       	in	r20, 0x0b	; 11
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	b9 01       	movw	r22, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	66 0f       	add	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	8a 95       	dec	r24
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	cb 01       	movw	r24, r22
 446:	84 27       	eor	r24, r20
 448:	8b b9       	out	0x0b, r24	; 11
			break;
 44a:	08 95       	ret
			default:
				printf("Unavailable Port !!");
 44c:	80 e1       	ldi	r24, 0x10	; 16
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	9f 93       	push	r25
 452:	8f 93       	push	r24
 454:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
			break;
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	08 95       	ret

0000045e <DIO_read>:
*/

//READING
void DIO_read(uint8_t pinNum, uint8_t portNum,uint8_t *value)
{
	switch (portNum)
 45e:	63 34       	cpi	r22, 0x43	; 67
 460:	e1 f0       	breq	.+56     	; 0x49a <DIO_read+0x3c>
 462:	64 34       	cpi	r22, 0x44	; 68
 464:	89 f1       	breq	.+98     	; 0x4c8 <DIO_read+0x6a>
 466:	62 34       	cpi	r22, 0x42	; 66
 468:	09 f0       	breq	.+2      	; 0x46c <DIO_read+0xe>
 46a:	45 c0       	rjmp	.+138    	; 0x4f6 <DIO_read+0x98>
	{
		case PORT_B:
			*value = READ_BIT(PINB, pinNum);
 46c:	93 b1       	in	r25, 0x03	; 3
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	b9 01       	movw	r22, r18
 474:	08 2e       	mov	r0, r24
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_read+0x1e>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	0a 94       	dec	r0
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_read+0x1a>
 480:	29 2f       	mov	r18, r25
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	26 23       	and	r18, r22
 486:	37 23       	and	r19, r23
 488:	b9 01       	movw	r22, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_read+0x32>
 48c:	75 95       	asr	r23
 48e:	67 95       	ror	r22
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_read+0x2e>
 494:	fa 01       	movw	r30, r20
 496:	60 83       	st	Z, r22
		break;
 498:	08 95       	ret
		case PORT_C:
			*value = READ_BIT(PINC, pinNum);
 49a:	96 b1       	in	r25, 0x06	; 6
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	b9 01       	movw	r22, r18
 4a2:	08 2e       	mov	r0, r24
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_read+0x4c>
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	0a 94       	dec	r0
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_read+0x48>
 4ae:	29 2f       	mov	r18, r25
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	26 23       	and	r18, r22
 4b4:	37 23       	and	r19, r23
 4b6:	b9 01       	movw	r22, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_read+0x60>
 4ba:	75 95       	asr	r23
 4bc:	67 95       	ror	r22
 4be:	8a 95       	dec	r24
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_read+0x5c>
 4c2:	fa 01       	movw	r30, r20
 4c4:	60 83       	st	Z, r22
		break;
 4c6:	08 95       	ret
		case PORT_D:
			*value = READ_BIT(PIND, pinNum);
 4c8:	99 b1       	in	r25, 0x09	; 9
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	b9 01       	movw	r22, r18
 4d0:	08 2e       	mov	r0, r24
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_read+0x7a>
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_read+0x76>
 4dc:	29 2f       	mov	r18, r25
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	26 23       	and	r18, r22
 4e2:	37 23       	and	r19, r23
 4e4:	b9 01       	movw	r22, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_read+0x8e>
 4e8:	75 95       	asr	r23
 4ea:	67 95       	ror	r22
 4ec:	8a 95       	dec	r24
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_read+0x8a>
 4f0:	fa 01       	movw	r30, r20
 4f2:	60 83       	st	Z, r22
		break;	
 4f4:	08 95       	ret
		default:
			printf("Unavailable Port !!");
 4f6:	80 e1       	ldi	r24, 0x10	; 16
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	9f 93       	push	r25
 4fc:	8f 93       	push	r24
 4fe:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
		break;
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	08 95       	ret

00000508 <INT0_init>:
	3. enable the interrupt
*/

void INT0_init()
{
	SREG |= (1<<7);
 508:	8f b7       	in	r24, 0x3f	; 63
 50a:	80 68       	ori	r24, 0x80	; 128
 50c:	8f bf       	out	0x3f, r24	; 63
	EIMSK = 0x01;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0x03;
 512:	83 e0       	ldi	r24, 0x03	; 3
 514:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 518:	08 95       	ret

0000051a <TIMER0_start>:
*/

//STARTING TIMER 0
static void TIMER0_start(EN_PRESCALLER pre)
{
	switch(pre)
 51a:	82 30       	cpi	r24, 0x02	; 2
 51c:	89 f0       	breq	.+34     	; 0x540 <TIMER0_start+0x26>
 51e:	28 f4       	brcc	.+10     	; 0x52a <TIMER0_start+0x10>
 520:	88 23       	and	r24, r24
 522:	41 f0       	breq	.+16     	; 0x534 <TIMER0_start+0x1a>
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	49 f0       	breq	.+18     	; 0x53a <TIMER0_start+0x20>
 528:	14 c0       	rjmp	.+40     	; 0x552 <TIMER0_start+0x38>
 52a:	83 30       	cpi	r24, 0x03	; 3
 52c:	61 f0       	breq	.+24     	; 0x546 <TIMER0_start+0x2c>
 52e:	84 30       	cpi	r24, 0x04	; 4
 530:	69 f0       	breq	.+26     	; 0x54c <TIMER0_start+0x32>
 532:	0f c0       	rjmp	.+30     	; 0x552 <TIMER0_start+0x38>
	{
		case _0_PRE:
			TCCR0B = 0x01;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	85 bd       	out	0x25, r24	; 37
		break;
 538:	08 95       	ret
		case _8_PRE:
			TCCR0B = 0x02;
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	85 bd       	out	0x25, r24	; 37
		break;
 53e:	08 95       	ret
		case _64_PRE:
			TCCR0B = 0x03;
 540:	83 e0       	ldi	r24, 0x03	; 3
 542:	85 bd       	out	0x25, r24	; 37
		break;
 544:	08 95       	ret
		case _256_PRE:
			TCCR0B = 0x04;
 546:	84 e0       	ldi	r24, 0x04	; 4
 548:	85 bd       	out	0x25, r24	; 37
		break;
 54a:	08 95       	ret
		case _1024_PRE:
			TCCR0B = 0x05;
 54c:	85 e0       	ldi	r24, 0x05	; 5
 54e:	85 bd       	out	0x25, r24	; 37
		break;
 550:	08 95       	ret
		default:
			printf("Unavailable prescalaer !!");
 552:	80 e3       	ldi	r24, 0x30	; 48
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	9f 93       	push	r25
 558:	8f 93       	push	r24
 55a:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
		break;
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	08 95       	ret

00000564 <TIMER2_start>:


//STARTING TIMER 2
static void TIMER2_start(EN_PRESCALLER pre)
{
	switch(pre)
 564:	82 30       	cpi	r24, 0x02	; 2
 566:	99 f0       	breq	.+38     	; 0x58e <TIMER2_start+0x2a>
 568:	28 f4       	brcc	.+10     	; 0x574 <TIMER2_start+0x10>
 56a:	88 23       	and	r24, r24
 56c:	41 f0       	breq	.+16     	; 0x57e <TIMER2_start+0x1a>
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	51 f0       	breq	.+20     	; 0x586 <TIMER2_start+0x22>
 572:	19 c0       	rjmp	.+50     	; 0x5a6 <TIMER2_start+0x42>
 574:	83 30       	cpi	r24, 0x03	; 3
 576:	79 f0       	breq	.+30     	; 0x596 <TIMER2_start+0x32>
 578:	84 30       	cpi	r24, 0x04	; 4
 57a:	89 f0       	breq	.+34     	; 0x59e <TIMER2_start+0x3a>
 57c:	14 c0       	rjmp	.+40     	; 0x5a6 <TIMER2_start+0x42>
	{
		case _0_PRE:
			TCCR2B = 0x01;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		break;
 584:	08 95       	ret
		case _8_PRE:
			TCCR2B = 0x02;
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		break;
 58c:	08 95       	ret
		case _64_PRE:
			TCCR2B = 0x04;
 58e:	84 e0       	ldi	r24, 0x04	; 4
 590:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		break;
 594:	08 95       	ret
		case _256_PRE:
			TCCR2B = 0x06;
 596:	86 e0       	ldi	r24, 0x06	; 6
 598:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		break;
 59c:	08 95       	ret
		case _1024_PRE:
			TCCR2B = 0x07;
 59e:	87 e0       	ldi	r24, 0x07	; 7
 5a0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		break;
 5a4:	08 95       	ret
		default:
			printf("Unavailable prescalaer !!");
 5a6:	80 e3       	ldi	r24, 0x30	; 48
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	9f 93       	push	r25
 5ac:	8f 93       	push	r24
 5ae:	0e 94 de 03 	call	0x7bc	; 0x7bc <printf>
		break;
 5b2:	0f 90       	pop	r0
 5b4:	0f 90       	pop	r0
 5b6:	08 95       	ret

000005b8 <TIMER0_delay>:

//implement the delay function with (initial value, prescalar and the number of looping) as inputs
//and it will impelement the required delay
 
void TIMER0_delay(uint8_t intialValue, uint8_t loopsNum, EN_PRESCALLER pre)
{
 5b8:	cf 93       	push	r28
 5ba:	c6 2f       	mov	r28, r22
	TCNT0 = intialValue;
 5bc:	86 bd       	out	0x26, r24	; 38
	TIMER0_start(pre);
 5be:	84 2f       	mov	r24, r20
 5c0:	0e 94 8d 02 	call	0x51a	; 0x51a <TIMER0_start>
	if(loopsNum == 0)
 5c4:	c1 11       	cpse	r28, r1
 5c6:	0b c0       	rjmp	.+22     	; 0x5de <TIMER0_delay+0x26>
	{
		while(GET_STATE_0 == 0);
 5c8:	a8 9b       	sbis	0x15, 0	; 21
 5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <TIMER0_delay+0x10>
		TIFR0 = 0x01;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	85 bb       	out	0x15, r24	; 21
 5d0:	0d c0       	rjmp	.+26     	; 0x5ec <TIMER0_delay+0x34>
	}
	else
	{
		for (int i = 0; i < loopsNum; i++)
		{
			while(GET_STATE_0 == 0);
 5d2:	a8 9b       	sbis	0x15, 0	; 21
 5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <TIMER0_delay+0x1a>
			TIFR0 = 0x01;
 5d6:	21 e0       	ldi	r18, 0x01	; 1
 5d8:	25 bb       	out	0x15, r18	; 21
		while(GET_STATE_0 == 0);
		TIFR0 = 0x01;
	}
	else
	{
		for (int i = 0; i < loopsNum; i++)
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <TIMER0_delay+0x2a>
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	2c 2f       	mov	r18, r28
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	82 17       	cp	r24, r18
 5e8:	93 07       	cpc	r25, r19
 5ea:	9c f3       	brlt	.-26     	; 0x5d2 <TIMER0_delay+0x1a>
		{
			while(GET_STATE_0 == 0);
			TIFR0 = 0x01;
		}
	}
	TCCR0A = 0x00;
 5ec:	14 bc       	out	0x24, r1	; 36
}
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <TIMER2_delay>:
	6. finish the timer
*/

//delay with timer 1 
void TIMER2_delay(uint8_t intialValue, uint8_t loopsNum, EN_PRESCALLER pre)
{
 5f2:	cf 93       	push	r28
 5f4:	c6 2f       	mov	r28, r22
	TCNT2 = intialValue;
 5f6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	TIMER2_start(pre);
 5fa:	84 2f       	mov	r24, r20
 5fc:	0e 94 b2 02 	call	0x564	; 0x564 <TIMER2_start>
	if(loopsNum == 0)
 600:	c1 11       	cpse	r28, r1
 602:	0b c0       	rjmp	.+22     	; 0x61a <TIMER2_delay+0x28>
	{
		while(GET_STATE_2 == 0);
 604:	b9 9b       	sbis	0x17, 1	; 23
 606:	fe cf       	rjmp	.-4      	; 0x604 <TIMER2_delay+0x12>
		TIFR2 = 0x01;
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	87 bb       	out	0x17, r24	; 23
 60c:	0d c0       	rjmp	.+26     	; 0x628 <TIMER2_delay+0x36>
	}
	else
	{
		for (int i = 0; i < loopsNum; i++)
		{
			while(GET_STATE_2 == 0);
 60e:	b9 9b       	sbis	0x17, 1	; 23
 610:	fe cf       	rjmp	.-4      	; 0x60e <TIMER2_delay+0x1c>
			TIFR2 = 0x02;
 612:	22 e0       	ldi	r18, 0x02	; 2
 614:	27 bb       	out	0x17, r18	; 23
		while(GET_STATE_2 == 0);
		TIFR2 = 0x01;
	}
	else
	{
		for (int i = 0; i < loopsNum; i++)
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	02 c0       	rjmp	.+4      	; 0x61e <TIMER2_delay+0x2c>
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	2c 2f       	mov	r18, r28
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	82 17       	cp	r24, r18
 624:	93 07       	cpc	r25, r19
 626:	9c f3       	brlt	.-26     	; 0x60e <TIMER2_delay+0x1c>
		{
			while(GET_STATE_2 == 0);
			TIFR2 = 0x02;
		}
	}
	TCCR2A = 0x00;
 628:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <car_toggleYELLOWLED>:
//==============FOR YELLOW LEDS=============//

// toggle the yellow led in car's traffic light
static void car_toggleYELLOWLED()
{
	LED_toggle(1, PORT_C);
 630:	63 e4       	ldi	r22, 0x43	; 67
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	0e 94 df 00 	call	0x1be	; 0x1be <LED_toggle>
 638:	08 95       	ret

0000063a <ped_toggleYELLOWLED>:
}

// toggle the yellow led in pedestrian's traffic light
static void ped_toggleYELLOWLED()
{
	LED_toggle(1, PORT_B);
 63a:	62 e4       	ldi	r22, 0x42	; 66
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 df 00 	call	0x1be	; 0x1be <LED_toggle>
 642:	08 95       	ret

00000644 <init_leds>:
	4. initiate the interrupts
*/

void init_leds()
{
	LED_init(0, PORT_C);
 644:	63 e4       	ldi	r22, 0x43	; 67
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED_init>
	LED_init(1, PORT_C);
 64c:	63 e4       	ldi	r22, 0x43	; 67
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED_init>
	LED_init(2, PORT_C);
 654:	63 e4       	ldi	r22, 0x43	; 67
 656:	82 e0       	ldi	r24, 0x02	; 2
 658:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED_init>

	LED_init(0, PORT_B);
 65c:	62 e4       	ldi	r22, 0x42	; 66
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED_init>
	LED_init(1, PORT_B);
 664:	62 e4       	ldi	r22, 0x42	; 66
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED_init>
	LED_init(2, PORT_B);
 66c:	62 e4       	ldi	r22, 0x42	; 66
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED_init>
	
	BUTTON_init(2, PORT_D);
 674:	64 e4       	ldi	r22, 0x44	; 68
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 a7 00 	call	0x14e	; 0x14e <BUTTON_init>
	
	INT0_init();
 680:	0e 94 84 02 	call	0x508	; 0x508 <INT0_init>
 684:	08 95       	ret

00000686 <carREDLED_ON>:
//MAKE THE RED LED OF THE CAR ON
// write to pin 0 port A => 1 & pin 1 , 2 in port A => 0

void carREDLED_ON()
{
	LED_on(0, PORT_C);
 686:	63 e4       	ldi	r22, 0x43	; 67
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_on>
	LED_off(1,PORT_C);
 68e:	63 e4       	ldi	r22, 0x43	; 67
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
	LED_off(2,PORT_C);
 696:	63 e4       	ldi	r22, 0x43	; 67
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
 69e:	08 95       	ret

000006a0 <pedREDLED_ON>:

//MAKE THE RED LED OF THE PED ON
// write to pin 0 port B => 1 & pin 1 , 2 in port B => 0
void pedREDLED_ON()
{
	LED_on(0, PORT_B);
 6a0:	62 e4       	ldi	r22, 0x42	; 66
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_on>
	LED_off(1,PORT_B);
 6a8:	62 e4       	ldi	r22, 0x42	; 66
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
	LED_off(2,PORT_B);
 6b0:	62 e4       	ldi	r22, 0x42	; 66
 6b2:	82 e0       	ldi	r24, 0x02	; 2
 6b4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
 6b8:	08 95       	ret

000006ba <carGREENLED_ON>:

//MAKE THE GREEN LED OF THE CAR ON
// write to pin 2 port A => 1 & pin 0 , 1 in port A => 0
void carGREENLED_ON()
{
	LED_off(0, PORT_C);
 6ba:	63 e4       	ldi	r22, 0x43	; 67
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
	LED_off(1,PORT_C);
 6c2:	63 e4       	ldi	r22, 0x43	; 67
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
	LED_on(2,PORT_C);
 6ca:	63 e4       	ldi	r22, 0x43	; 67
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_on>
 6d2:	08 95       	ret

000006d4 <pedGREENLED_ON>:

//MAKE THE GREEN LED OF THE PED ON
// write to pin 2 port B => 1 & pin 0 , 1 in port B => 0
void pedGREENLED_ON()
{
	LED_off(0, PORT_B);
 6d4:	62 e4       	ldi	r22, 0x42	; 66
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
	LED_off(1,PORT_B);
 6dc:	62 e4       	ldi	r22, 0x42	; 66
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
	LED_on(2,PORT_B);
 6e4:	62 e4       	ldi	r22, 0x42	; 66
 6e6:	82 e0       	ldi	r24, 0x02	; 2
 6e8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_on>
 6ec:	08 95       	ret

000006ee <carYELLOWLED_BLINKING>:
and the initial value = 12 => 0x0c
*/

// MAKE THE YELLOW LED OF CARS BLINKING
void carYELLOWLED_BLINKING()
{
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
	for (int i = 0; i < 5; i++)
 6f2:	c0 e0       	ldi	r28, 0x00	; 0
 6f4:	d0 e0       	ldi	r29, 0x00	; 0
 6f6:	08 c0       	rjmp	.+16     	; 0x708 <carYELLOWLED_BLINKING+0x1a>
	{
		car_toggleYELLOWLED();
 6f8:	0e 94 18 03 	call	0x630	; 0x630 <car_toggleYELLOWLED>
		TIMER0_delay(0x0c, 4, _1024_PRE);
 6fc:	44 e0       	ldi	r20, 0x04	; 4
 6fe:	64 e0       	ldi	r22, 0x04	; 4
 700:	8c e0       	ldi	r24, 0x0C	; 12
 702:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <TIMER0_delay>
*/

// MAKE THE YELLOW LED OF CARS BLINKING
void carYELLOWLED_BLINKING()
{
	for (int i = 0; i < 5; i++)
 706:	21 96       	adiw	r28, 0x01	; 1
 708:	c5 30       	cpi	r28, 0x05	; 5
 70a:	d1 05       	cpc	r29, r1
 70c:	ac f3       	brlt	.-22     	; 0x6f8 <carYELLOWLED_BLINKING+0xa>
	{
		car_toggleYELLOWLED();
		TIMER0_delay(0x0c, 4, _1024_PRE);
	}
}
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <pedcarYELLOWLED_BLINKING>:

//MAKE THE YELLOW LED OF PED BLINKING
void pedcarYELLOWLED_BLINKING()
{
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
	for (int i = 0; i < 5; i++)
 718:	c0 e0       	ldi	r28, 0x00	; 0
 71a:	d0 e0       	ldi	r29, 0x00	; 0
 71c:	0a c0       	rjmp	.+20     	; 0x732 <pedcarYELLOWLED_BLINKING+0x1e>
	{
		ped_toggleYELLOWLED();
 71e:	0e 94 1d 03 	call	0x63a	; 0x63a <ped_toggleYELLOWLED>
		car_toggleYELLOWLED();
 722:	0e 94 18 03 	call	0x630	; 0x630 <car_toggleYELLOWLED>
		TIMER2_delay(0x0c, 4, _1024_PRE);
 726:	44 e0       	ldi	r20, 0x04	; 4
 728:	64 e0       	ldi	r22, 0x04	; 4
 72a:	8c e0       	ldi	r24, 0x0C	; 12
 72c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <TIMER2_delay>
}

//MAKE THE YELLOW LED OF PED BLINKING
void pedcarYELLOWLED_BLINKING()
{
	for (int i = 0; i < 5; i++)
 730:	21 96       	adiw	r28, 0x01	; 1
 732:	c5 30       	cpi	r28, 0x05	; 5
 734:	d1 05       	cpc	r29, r1
 736:	9c f3       	brlt	.-26     	; 0x71e <pedcarYELLOWLED_BLINKING+0xa>
	{
		ped_toggleYELLOWLED();
		car_toggleYELLOWLED();
		TIMER2_delay(0x0c, 4, _1024_PRE);
	}
}
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	08 95       	ret

0000073e <pedLEDS_OFF>:
/*
	write to pins 0 1 & 2 in port B => 0
*/
void pedLEDS_OFF()
{
	LED_off(0, PORT_B);
 73e:	62 e4       	ldi	r22, 0x42	; 66
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
	LED_off(1,PORT_B);
 746:	62 e4       	ldi	r22, 0x42	; 66
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
	LED_off(2,PORT_B);
 74e:	62 e4       	ldi	r22, 0x42	; 66
 750:	82 e0       	ldi	r24, 0x02	; 2
 752:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_off>
 756:	08 95       	ret

00000758 <car_GREENLED_ON>:
	1. light the green led on 
	2. wait for 5 seconds
*/
void car_GREENLED_ON()
{
	carGREENLED_ON();
 758:	0e 94 5d 03 	call	0x6ba	; 0x6ba <carGREENLED_ON>
	TIMER0_delay(0x0c, 20, _1024_PRE);
 75c:	44 e0       	ldi	r20, 0x04	; 4
 75e:	64 e1       	ldi	r22, 0x14	; 20
 760:	8c e0       	ldi	r24, 0x0C	; 12
 762:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <TIMER0_delay>
 766:	08 95       	ret

00000768 <car_REDLED_ON>:
	1. light the red led on 
	2. wait for 5 seconds
*/
void car_REDLED_ON()
{
	carREDLED_ON();
 768:	0e 94 43 03 	call	0x686	; 0x686 <carREDLED_ON>
	TIMER0_delay(0x0c, 20, _1024_PRE);
 76c:	44 e0       	ldi	r20, 0x04	; 4
 76e:	64 e1       	ldi	r22, 0x14	; 20
 770:	8c e0       	ldi	r24, 0x0C	; 12
 772:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <TIMER0_delay>
 776:	08 95       	ret

00000778 <interruptfn1>:
		5. light off all ped's leds
*/

void interruptfn1()
{
	pedREDLED_ON();
 778:	0e 94 50 03 	call	0x6a0	; 0x6a0 <pedREDLED_ON>
	pedcarYELLOWLED_BLINKING();
 77c:	0e 94 8a 03 	call	0x714	; 0x714 <pedcarYELLOWLED_BLINKING>
	pedGREENLED_ON();
 780:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <pedGREENLED_ON>
	carREDLED_ON();
 784:	0e 94 43 03 	call	0x686	; 0x686 <carREDLED_ON>
	TIMER2_delay(0x0c, 20, _1024_PRE);
 788:	44 e0       	ldi	r20, 0x04	; 4
 78a:	64 e1       	ldi	r22, 0x14	; 20
 78c:	8c e0       	ldi	r24, 0x0C	; 12
 78e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <TIMER2_delay>
	pedcarYELLOWLED_BLINKING();
 792:	0e 94 8a 03 	call	0x714	; 0x714 <pedcarYELLOWLED_BLINKING>
	pedREDLED_ON();
 796:	0e 94 50 03 	call	0x6a0	; 0x6a0 <pedREDLED_ON>
	carGREENLED_ON();
 79a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <carGREENLED_ON>
	pedLEDS_OFF();
 79e:	0e 94 9f 03 	call	0x73e	; 0x73e <pedLEDS_OFF>
 7a2:	08 95       	ret

000007a4 <interruptfn2>:
		4 light all leds off of ped's  
*/

void interruptfn2()
{
	pedGREENLED_ON();
 7a4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <pedGREENLED_ON>
	carREDLED_ON();
 7a8:	0e 94 43 03 	call	0x686	; 0x686 <carREDLED_ON>
	TIMER2_delay(0x0c, 20, _1024_PRE);
 7ac:	44 e0       	ldi	r20, 0x04	; 4
 7ae:	64 e1       	ldi	r22, 0x14	; 20
 7b0:	8c e0       	ldi	r24, 0x0C	; 12
 7b2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <TIMER2_delay>
	pedLEDS_OFF();
 7b6:	0e 94 9f 03 	call	0x73e	; 0x73e <pedLEDS_OFF>
 7ba:	08 95       	ret

000007bc <printf>:
 7bc:	a0 e0       	ldi	r26, 0x00	; 0
 7be:	b0 e0       	ldi	r27, 0x00	; 0
 7c0:	e4 ee       	ldi	r30, 0xE4	; 228
 7c2:	f3 e0       	ldi	r31, 0x03	; 3
 7c4:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__prologue_saves__+0x20>
 7c8:	ae 01       	movw	r20, r28
 7ca:	4b 5f       	subi	r20, 0xFB	; 251
 7cc:	5f 4f       	sbci	r21, 0xFF	; 255
 7ce:	fa 01       	movw	r30, r20
 7d0:	61 91       	ld	r22, Z+
 7d2:	71 91       	ld	r23, Z+
 7d4:	af 01       	movw	r20, r30
 7d6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__iob+0x2>
 7da:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__iob+0x3>
 7de:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <vfprintf>
 7e2:	e2 e0       	ldi	r30, 0x02	; 2
 7e4:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__epilogue_restores__+0x20>

000007e8 <vfprintf>:
 7e8:	ab e0       	ldi	r26, 0x0B	; 11
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
 7ec:	ea ef       	ldi	r30, 0xFA	; 250
 7ee:	f3 e0       	ldi	r31, 0x03	; 3
 7f0:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__prologue_saves__>
 7f4:	6c 01       	movw	r12, r24
 7f6:	7b 01       	movw	r14, r22
 7f8:	8a 01       	movw	r16, r20
 7fa:	fc 01       	movw	r30, r24
 7fc:	17 82       	std	Z+7, r1	; 0x07
 7fe:	16 82       	std	Z+6, r1	; 0x06
 800:	83 81       	ldd	r24, Z+3	; 0x03
 802:	81 ff       	sbrs	r24, 1
 804:	cc c1       	rjmp	.+920    	; 0xb9e <__stack+0x29f>
 806:	ce 01       	movw	r24, r28
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	3c 01       	movw	r6, r24
 80c:	f6 01       	movw	r30, r12
 80e:	93 81       	ldd	r25, Z+3	; 0x03
 810:	f7 01       	movw	r30, r14
 812:	93 fd       	sbrc	r25, 3
 814:	85 91       	lpm	r24, Z+
 816:	93 ff       	sbrs	r25, 3
 818:	81 91       	ld	r24, Z+
 81a:	7f 01       	movw	r14, r30
 81c:	88 23       	and	r24, r24
 81e:	09 f4       	brne	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 820:	ba c1       	rjmp	.+884    	; 0xb96 <__stack+0x297>
 822:	85 32       	cpi	r24, 0x25	; 37
 824:	39 f4       	brne	.+14     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 826:	93 fd       	sbrc	r25, 3
 828:	85 91       	lpm	r24, Z+
 82a:	93 ff       	sbrs	r25, 3
 82c:	81 91       	ld	r24, Z+
 82e:	7f 01       	movw	r14, r30
 830:	85 32       	cpi	r24, 0x25	; 37
 832:	29 f4       	brne	.+10     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 834:	b6 01       	movw	r22, r12
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 83c:	e7 cf       	rjmp	.-50     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 83e:	91 2c       	mov	r9, r1
 840:	21 2c       	mov	r2, r1
 842:	31 2c       	mov	r3, r1
 844:	ff e1       	ldi	r31, 0x1F	; 31
 846:	f3 15       	cp	r31, r3
 848:	d8 f0       	brcs	.+54     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 84a:	8b 32       	cpi	r24, 0x2B	; 43
 84c:	79 f0       	breq	.+30     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 84e:	38 f4       	brcc	.+14     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 850:	80 32       	cpi	r24, 0x20	; 32
 852:	79 f0       	breq	.+30     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 854:	83 32       	cpi	r24, 0x23	; 35
 856:	a1 f4       	brne	.+40     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 858:	23 2d       	mov	r18, r3
 85a:	20 61       	ori	r18, 0x10	; 16
 85c:	1d c0       	rjmp	.+58     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 85e:	8d 32       	cpi	r24, 0x2D	; 45
 860:	61 f0       	breq	.+24     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 862:	80 33       	cpi	r24, 0x30	; 48
 864:	69 f4       	brne	.+26     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 866:	23 2d       	mov	r18, r3
 868:	21 60       	ori	r18, 0x01	; 1
 86a:	16 c0       	rjmp	.+44     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 86c:	83 2d       	mov	r24, r3
 86e:	82 60       	ori	r24, 0x02	; 2
 870:	38 2e       	mov	r3, r24
 872:	e3 2d       	mov	r30, r3
 874:	e4 60       	ori	r30, 0x04	; 4
 876:	3e 2e       	mov	r3, r30
 878:	2a c0       	rjmp	.+84     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 87a:	f3 2d       	mov	r31, r3
 87c:	f8 60       	ori	r31, 0x08	; 8
 87e:	1d c0       	rjmp	.+58     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 880:	37 fc       	sbrc	r3, 7
 882:	2d c0       	rjmp	.+90     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 884:	20 ed       	ldi	r18, 0xD0	; 208
 886:	28 0f       	add	r18, r24
 888:	2a 30       	cpi	r18, 0x0A	; 10
 88a:	40 f0       	brcs	.+16     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 88c:	8e 32       	cpi	r24, 0x2E	; 46
 88e:	b9 f4       	brne	.+46     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 890:	36 fc       	sbrc	r3, 6
 892:	81 c1       	rjmp	.+770    	; 0xb96 <__stack+0x297>
 894:	23 2d       	mov	r18, r3
 896:	20 64       	ori	r18, 0x40	; 64
 898:	32 2e       	mov	r3, r18
 89a:	19 c0       	rjmp	.+50     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 89c:	36 fe       	sbrs	r3, 6
 89e:	06 c0       	rjmp	.+12     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8a0:	8a e0       	ldi	r24, 0x0A	; 10
 8a2:	98 9e       	mul	r9, r24
 8a4:	20 0d       	add	r18, r0
 8a6:	11 24       	eor	r1, r1
 8a8:	92 2e       	mov	r9, r18
 8aa:	11 c0       	rjmp	.+34     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8ac:	ea e0       	ldi	r30, 0x0A	; 10
 8ae:	2e 9e       	mul	r2, r30
 8b0:	20 0d       	add	r18, r0
 8b2:	11 24       	eor	r1, r1
 8b4:	22 2e       	mov	r2, r18
 8b6:	f3 2d       	mov	r31, r3
 8b8:	f0 62       	ori	r31, 0x20	; 32
 8ba:	3f 2e       	mov	r3, r31
 8bc:	08 c0       	rjmp	.+16     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8be:	8c 36       	cpi	r24, 0x6C	; 108
 8c0:	21 f4       	brne	.+8      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8c2:	83 2d       	mov	r24, r3
 8c4:	80 68       	ori	r24, 0x80	; 128
 8c6:	38 2e       	mov	r3, r24
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8ca:	88 36       	cpi	r24, 0x68	; 104
 8cc:	41 f4       	brne	.+16     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8ce:	f7 01       	movw	r30, r14
 8d0:	93 fd       	sbrc	r25, 3
 8d2:	85 91       	lpm	r24, Z+
 8d4:	93 ff       	sbrs	r25, 3
 8d6:	81 91       	ld	r24, Z+
 8d8:	7f 01       	movw	r14, r30
 8da:	81 11       	cpse	r24, r1
 8dc:	b3 cf       	rjmp	.-154    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 8de:	98 2f       	mov	r25, r24
 8e0:	9f 7d       	andi	r25, 0xDF	; 223
 8e2:	95 54       	subi	r25, 0x45	; 69
 8e4:	93 30       	cpi	r25, 0x03	; 3
 8e6:	28 f4       	brcc	.+10     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8e8:	0c 5f       	subi	r16, 0xFC	; 252
 8ea:	1f 4f       	sbci	r17, 0xFF	; 255
 8ec:	9f e3       	ldi	r25, 0x3F	; 63
 8ee:	99 83       	std	Y+1, r25	; 0x01
 8f0:	0d c0       	rjmp	.+26     	; 0x90c <__stack+0xd>
 8f2:	83 36       	cpi	r24, 0x63	; 99
 8f4:	31 f0       	breq	.+12     	; 0x902 <__stack+0x3>
 8f6:	83 37       	cpi	r24, 0x73	; 115
 8f8:	71 f0       	breq	.+28     	; 0x916 <__stack+0x17>
 8fa:	83 35       	cpi	r24, 0x53	; 83
 8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
 8fe:	59 c0       	rjmp	.+178    	; 0x9b2 <__stack+0xb3>
 900:	21 c0       	rjmp	.+66     	; 0x944 <__stack+0x45>
 902:	f8 01       	movw	r30, r16
 904:	80 81       	ld	r24, Z
 906:	89 83       	std	Y+1, r24	; 0x01
 908:	0e 5f       	subi	r16, 0xFE	; 254
 90a:	1f 4f       	sbci	r17, 0xFF	; 255
 90c:	88 24       	eor	r8, r8
 90e:	83 94       	inc	r8
 910:	91 2c       	mov	r9, r1
 912:	53 01       	movw	r10, r6
 914:	13 c0       	rjmp	.+38     	; 0x93c <__stack+0x3d>
 916:	28 01       	movw	r4, r16
 918:	f2 e0       	ldi	r31, 0x02	; 2
 91a:	4f 0e       	add	r4, r31
 91c:	51 1c       	adc	r5, r1
 91e:	f8 01       	movw	r30, r16
 920:	a0 80       	ld	r10, Z
 922:	b1 80       	ldd	r11, Z+1	; 0x01
 924:	36 fe       	sbrs	r3, 6
 926:	03 c0       	rjmp	.+6      	; 0x92e <__stack+0x2f>
 928:	69 2d       	mov	r22, r9
 92a:	70 e0       	ldi	r23, 0x00	; 0
 92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0x33>
 92e:	6f ef       	ldi	r22, 0xFF	; 255
 930:	7f ef       	ldi	r23, 0xFF	; 255
 932:	c5 01       	movw	r24, r10
 934:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <strnlen>
 938:	4c 01       	movw	r8, r24
 93a:	82 01       	movw	r16, r4
 93c:	f3 2d       	mov	r31, r3
 93e:	ff 77       	andi	r31, 0x7F	; 127
 940:	3f 2e       	mov	r3, r31
 942:	16 c0       	rjmp	.+44     	; 0x970 <__stack+0x71>
 944:	28 01       	movw	r4, r16
 946:	22 e0       	ldi	r18, 0x02	; 2
 948:	42 0e       	add	r4, r18
 94a:	51 1c       	adc	r5, r1
 94c:	f8 01       	movw	r30, r16
 94e:	a0 80       	ld	r10, Z
 950:	b1 80       	ldd	r11, Z+1	; 0x01
 952:	36 fe       	sbrs	r3, 6
 954:	03 c0       	rjmp	.+6      	; 0x95c <__stack+0x5d>
 956:	69 2d       	mov	r22, r9
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
 95c:	6f ef       	ldi	r22, 0xFF	; 255
 95e:	7f ef       	ldi	r23, 0xFF	; 255
 960:	c5 01       	movw	r24, r10
 962:	0e 94 d5 05 	call	0xbaa	; 0xbaa <strnlen_P>
 966:	4c 01       	movw	r8, r24
 968:	f3 2d       	mov	r31, r3
 96a:	f0 68       	ori	r31, 0x80	; 128
 96c:	3f 2e       	mov	r3, r31
 96e:	82 01       	movw	r16, r4
 970:	33 fc       	sbrc	r3, 3
 972:	1b c0       	rjmp	.+54     	; 0x9aa <__stack+0xab>
 974:	82 2d       	mov	r24, r2
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	88 16       	cp	r8, r24
 97a:	99 06       	cpc	r9, r25
 97c:	b0 f4       	brcc	.+44     	; 0x9aa <__stack+0xab>
 97e:	b6 01       	movw	r22, r12
 980:	80 e2       	ldi	r24, 0x20	; 32
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 988:	2a 94       	dec	r2
 98a:	f4 cf       	rjmp	.-24     	; 0x974 <__stack+0x75>
 98c:	f5 01       	movw	r30, r10
 98e:	37 fc       	sbrc	r3, 7
 990:	85 91       	lpm	r24, Z+
 992:	37 fe       	sbrs	r3, 7
 994:	81 91       	ld	r24, Z+
 996:	5f 01       	movw	r10, r30
 998:	b6 01       	movw	r22, r12
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 9a0:	21 10       	cpse	r2, r1
 9a2:	2a 94       	dec	r2
 9a4:	21 e0       	ldi	r18, 0x01	; 1
 9a6:	82 1a       	sub	r8, r18
 9a8:	91 08       	sbc	r9, r1
 9aa:	81 14       	cp	r8, r1
 9ac:	91 04       	cpc	r9, r1
 9ae:	71 f7       	brne	.-36     	; 0x98c <__stack+0x8d>
 9b0:	e8 c0       	rjmp	.+464    	; 0xb82 <__stack+0x283>
 9b2:	84 36       	cpi	r24, 0x64	; 100
 9b4:	11 f0       	breq	.+4      	; 0x9ba <__stack+0xbb>
 9b6:	89 36       	cpi	r24, 0x69	; 105
 9b8:	41 f5       	brne	.+80     	; 0xa0a <__stack+0x10b>
 9ba:	f8 01       	movw	r30, r16
 9bc:	37 fe       	sbrs	r3, 7
 9be:	07 c0       	rjmp	.+14     	; 0x9ce <__stack+0xcf>
 9c0:	60 81       	ld	r22, Z
 9c2:	71 81       	ldd	r23, Z+1	; 0x01
 9c4:	82 81       	ldd	r24, Z+2	; 0x02
 9c6:	93 81       	ldd	r25, Z+3	; 0x03
 9c8:	0c 5f       	subi	r16, 0xFC	; 252
 9ca:	1f 4f       	sbci	r17, 0xFF	; 255
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <__stack+0xdf>
 9ce:	60 81       	ld	r22, Z
 9d0:	71 81       	ldd	r23, Z+1	; 0x01
 9d2:	07 2e       	mov	r0, r23
 9d4:	00 0c       	add	r0, r0
 9d6:	88 0b       	sbc	r24, r24
 9d8:	99 0b       	sbc	r25, r25
 9da:	0e 5f       	subi	r16, 0xFE	; 254
 9dc:	1f 4f       	sbci	r17, 0xFF	; 255
 9de:	f3 2d       	mov	r31, r3
 9e0:	ff 76       	andi	r31, 0x6F	; 111
 9e2:	3f 2e       	mov	r3, r31
 9e4:	97 ff       	sbrs	r25, 7
 9e6:	09 c0       	rjmp	.+18     	; 0x9fa <__stack+0xfb>
 9e8:	90 95       	com	r25
 9ea:	80 95       	com	r24
 9ec:	70 95       	com	r23
 9ee:	61 95       	neg	r22
 9f0:	7f 4f       	sbci	r23, 0xFF	; 255
 9f2:	8f 4f       	sbci	r24, 0xFF	; 255
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	f0 68       	ori	r31, 0x80	; 128
 9f8:	3f 2e       	mov	r3, r31
 9fa:	2a e0       	ldi	r18, 0x0A	; 10
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	a3 01       	movw	r20, r6
 a00:	0e 94 27 06 	call	0xc4e	; 0xc4e <__ultoa_invert>
 a04:	88 2e       	mov	r8, r24
 a06:	86 18       	sub	r8, r6
 a08:	45 c0       	rjmp	.+138    	; 0xa94 <__stack+0x195>
 a0a:	85 37       	cpi	r24, 0x75	; 117
 a0c:	31 f4       	brne	.+12     	; 0xa1a <__stack+0x11b>
 a0e:	23 2d       	mov	r18, r3
 a10:	2f 7e       	andi	r18, 0xEF	; 239
 a12:	b2 2e       	mov	r11, r18
 a14:	2a e0       	ldi	r18, 0x0A	; 10
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	25 c0       	rjmp	.+74     	; 0xa64 <__stack+0x165>
 a1a:	93 2d       	mov	r25, r3
 a1c:	99 7f       	andi	r25, 0xF9	; 249
 a1e:	b9 2e       	mov	r11, r25
 a20:	8f 36       	cpi	r24, 0x6F	; 111
 a22:	c1 f0       	breq	.+48     	; 0xa54 <__stack+0x155>
 a24:	18 f4       	brcc	.+6      	; 0xa2c <__stack+0x12d>
 a26:	88 35       	cpi	r24, 0x58	; 88
 a28:	79 f0       	breq	.+30     	; 0xa48 <__stack+0x149>
 a2a:	b5 c0       	rjmp	.+362    	; 0xb96 <__stack+0x297>
 a2c:	80 37       	cpi	r24, 0x70	; 112
 a2e:	19 f0       	breq	.+6      	; 0xa36 <__stack+0x137>
 a30:	88 37       	cpi	r24, 0x78	; 120
 a32:	21 f0       	breq	.+8      	; 0xa3c <__stack+0x13d>
 a34:	b0 c0       	rjmp	.+352    	; 0xb96 <__stack+0x297>
 a36:	e9 2f       	mov	r30, r25
 a38:	e0 61       	ori	r30, 0x10	; 16
 a3a:	be 2e       	mov	r11, r30
 a3c:	b4 fe       	sbrs	r11, 4
 a3e:	0d c0       	rjmp	.+26     	; 0xa5a <__stack+0x15b>
 a40:	fb 2d       	mov	r31, r11
 a42:	f4 60       	ori	r31, 0x04	; 4
 a44:	bf 2e       	mov	r11, r31
 a46:	09 c0       	rjmp	.+18     	; 0xa5a <__stack+0x15b>
 a48:	34 fe       	sbrs	r3, 4
 a4a:	0a c0       	rjmp	.+20     	; 0xa60 <__stack+0x161>
 a4c:	29 2f       	mov	r18, r25
 a4e:	26 60       	ori	r18, 0x06	; 6
 a50:	b2 2e       	mov	r11, r18
 a52:	06 c0       	rjmp	.+12     	; 0xa60 <__stack+0x161>
 a54:	28 e0       	ldi	r18, 0x08	; 8
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	05 c0       	rjmp	.+10     	; 0xa64 <__stack+0x165>
 a5a:	20 e1       	ldi	r18, 0x10	; 16
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <__stack+0x165>
 a60:	20 e1       	ldi	r18, 0x10	; 16
 a62:	32 e0       	ldi	r19, 0x02	; 2
 a64:	f8 01       	movw	r30, r16
 a66:	b7 fe       	sbrs	r11, 7
 a68:	07 c0       	rjmp	.+14     	; 0xa78 <__stack+0x179>
 a6a:	60 81       	ld	r22, Z
 a6c:	71 81       	ldd	r23, Z+1	; 0x01
 a6e:	82 81       	ldd	r24, Z+2	; 0x02
 a70:	93 81       	ldd	r25, Z+3	; 0x03
 a72:	0c 5f       	subi	r16, 0xFC	; 252
 a74:	1f 4f       	sbci	r17, 0xFF	; 255
 a76:	06 c0       	rjmp	.+12     	; 0xa84 <__stack+0x185>
 a78:	60 81       	ld	r22, Z
 a7a:	71 81       	ldd	r23, Z+1	; 0x01
 a7c:	80 e0       	ldi	r24, 0x00	; 0
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 5f       	subi	r16, 0xFE	; 254
 a82:	1f 4f       	sbci	r17, 0xFF	; 255
 a84:	a3 01       	movw	r20, r6
 a86:	0e 94 27 06 	call	0xc4e	; 0xc4e <__ultoa_invert>
 a8a:	88 2e       	mov	r8, r24
 a8c:	86 18       	sub	r8, r6
 a8e:	fb 2d       	mov	r31, r11
 a90:	ff 77       	andi	r31, 0x7F	; 127
 a92:	3f 2e       	mov	r3, r31
 a94:	36 fe       	sbrs	r3, 6
 a96:	0d c0       	rjmp	.+26     	; 0xab2 <__stack+0x1b3>
 a98:	23 2d       	mov	r18, r3
 a9a:	2e 7f       	andi	r18, 0xFE	; 254
 a9c:	a2 2e       	mov	r10, r18
 a9e:	89 14       	cp	r8, r9
 aa0:	58 f4       	brcc	.+22     	; 0xab8 <__stack+0x1b9>
 aa2:	34 fe       	sbrs	r3, 4
 aa4:	0b c0       	rjmp	.+22     	; 0xabc <__stack+0x1bd>
 aa6:	32 fc       	sbrc	r3, 2
 aa8:	09 c0       	rjmp	.+18     	; 0xabc <__stack+0x1bd>
 aaa:	83 2d       	mov	r24, r3
 aac:	8e 7e       	andi	r24, 0xEE	; 238
 aae:	a8 2e       	mov	r10, r24
 ab0:	05 c0       	rjmp	.+10     	; 0xabc <__stack+0x1bd>
 ab2:	b8 2c       	mov	r11, r8
 ab4:	a3 2c       	mov	r10, r3
 ab6:	03 c0       	rjmp	.+6      	; 0xabe <__stack+0x1bf>
 ab8:	b8 2c       	mov	r11, r8
 aba:	01 c0       	rjmp	.+2      	; 0xabe <__stack+0x1bf>
 abc:	b9 2c       	mov	r11, r9
 abe:	a4 fe       	sbrs	r10, 4
 ac0:	0f c0       	rjmp	.+30     	; 0xae0 <__stack+0x1e1>
 ac2:	fe 01       	movw	r30, r28
 ac4:	e8 0d       	add	r30, r8
 ac6:	f1 1d       	adc	r31, r1
 ac8:	80 81       	ld	r24, Z
 aca:	80 33       	cpi	r24, 0x30	; 48
 acc:	21 f4       	brne	.+8      	; 0xad6 <__stack+0x1d7>
 ace:	9a 2d       	mov	r25, r10
 ad0:	99 7e       	andi	r25, 0xE9	; 233
 ad2:	a9 2e       	mov	r10, r25
 ad4:	09 c0       	rjmp	.+18     	; 0xae8 <__stack+0x1e9>
 ad6:	a2 fe       	sbrs	r10, 2
 ad8:	06 c0       	rjmp	.+12     	; 0xae6 <__stack+0x1e7>
 ada:	b3 94       	inc	r11
 adc:	b3 94       	inc	r11
 ade:	04 c0       	rjmp	.+8      	; 0xae8 <__stack+0x1e9>
 ae0:	8a 2d       	mov	r24, r10
 ae2:	86 78       	andi	r24, 0x86	; 134
 ae4:	09 f0       	breq	.+2      	; 0xae8 <__stack+0x1e9>
 ae6:	b3 94       	inc	r11
 ae8:	a3 fc       	sbrc	r10, 3
 aea:	11 c0       	rjmp	.+34     	; 0xb0e <__stack+0x20f>
 aec:	a0 fe       	sbrs	r10, 0
 aee:	06 c0       	rjmp	.+12     	; 0xafc <__stack+0x1fd>
 af0:	b2 14       	cp	r11, r2
 af2:	88 f4       	brcc	.+34     	; 0xb16 <__stack+0x217>
 af4:	28 0c       	add	r2, r8
 af6:	92 2c       	mov	r9, r2
 af8:	9b 18       	sub	r9, r11
 afa:	0e c0       	rjmp	.+28     	; 0xb18 <__stack+0x219>
 afc:	b2 14       	cp	r11, r2
 afe:	60 f4       	brcc	.+24     	; 0xb18 <__stack+0x219>
 b00:	b6 01       	movw	r22, r12
 b02:	80 e2       	ldi	r24, 0x20	; 32
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b0a:	b3 94       	inc	r11
 b0c:	f7 cf       	rjmp	.-18     	; 0xafc <__stack+0x1fd>
 b0e:	b2 14       	cp	r11, r2
 b10:	18 f4       	brcc	.+6      	; 0xb18 <__stack+0x219>
 b12:	2b 18       	sub	r2, r11
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <__stack+0x21b>
 b16:	98 2c       	mov	r9, r8
 b18:	21 2c       	mov	r2, r1
 b1a:	a4 fe       	sbrs	r10, 4
 b1c:	10 c0       	rjmp	.+32     	; 0xb3e <__stack+0x23f>
 b1e:	b6 01       	movw	r22, r12
 b20:	80 e3       	ldi	r24, 0x30	; 48
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b28:	a2 fe       	sbrs	r10, 2
 b2a:	17 c0       	rjmp	.+46     	; 0xb5a <__stack+0x25b>
 b2c:	a1 fc       	sbrc	r10, 1
 b2e:	03 c0       	rjmp	.+6      	; 0xb36 <__stack+0x237>
 b30:	88 e7       	ldi	r24, 0x78	; 120
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <__stack+0x23b>
 b36:	88 e5       	ldi	r24, 0x58	; 88
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	b6 01       	movw	r22, r12
 b3c:	0c c0       	rjmp	.+24     	; 0xb56 <__stack+0x257>
 b3e:	8a 2d       	mov	r24, r10
 b40:	86 78       	andi	r24, 0x86	; 134
 b42:	59 f0       	breq	.+22     	; 0xb5a <__stack+0x25b>
 b44:	a1 fe       	sbrs	r10, 1
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <__stack+0x24d>
 b48:	8b e2       	ldi	r24, 0x2B	; 43
 b4a:	01 c0       	rjmp	.+2      	; 0xb4e <__stack+0x24f>
 b4c:	80 e2       	ldi	r24, 0x20	; 32
 b4e:	a7 fc       	sbrc	r10, 7
 b50:	8d e2       	ldi	r24, 0x2D	; 45
 b52:	b6 01       	movw	r22, r12
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b5a:	89 14       	cp	r8, r9
 b5c:	38 f4       	brcc	.+14     	; 0xb6c <__stack+0x26d>
 b5e:	b6 01       	movw	r22, r12
 b60:	80 e3       	ldi	r24, 0x30	; 48
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b68:	9a 94       	dec	r9
 b6a:	f7 cf       	rjmp	.-18     	; 0xb5a <__stack+0x25b>
 b6c:	8a 94       	dec	r8
 b6e:	f3 01       	movw	r30, r6
 b70:	e8 0d       	add	r30, r8
 b72:	f1 1d       	adc	r31, r1
 b74:	80 81       	ld	r24, Z
 b76:	b6 01       	movw	r22, r12
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b7e:	81 10       	cpse	r8, r1
 b80:	f5 cf       	rjmp	.-22     	; 0xb6c <__stack+0x26d>
 b82:	22 20       	and	r2, r2
 b84:	09 f4       	brne	.+2      	; 0xb88 <__stack+0x289>
 b86:	42 ce       	rjmp	.-892    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 b88:	b6 01       	movw	r22, r12
 b8a:	80 e2       	ldi	r24, 0x20	; 32
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <fputc>
 b92:	2a 94       	dec	r2
 b94:	f6 cf       	rjmp	.-20     	; 0xb82 <__stack+0x283>
 b96:	f6 01       	movw	r30, r12
 b98:	86 81       	ldd	r24, Z+6	; 0x06
 b9a:	97 81       	ldd	r25, Z+7	; 0x07
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <__stack+0x2a3>
 b9e:	8f ef       	ldi	r24, 0xFF	; 255
 ba0:	9f ef       	ldi	r25, 0xFF	; 255
 ba2:	2b 96       	adiw	r28, 0x0b	; 11
 ba4:	e2 e1       	ldi	r30, 0x12	; 18
 ba6:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__epilogue_restores__>

00000baa <strnlen_P>:
 baa:	fc 01       	movw	r30, r24
 bac:	05 90       	lpm	r0, Z+
 bae:	61 50       	subi	r22, 0x01	; 1
 bb0:	70 40       	sbci	r23, 0x00	; 0
 bb2:	01 10       	cpse	r0, r1
 bb4:	d8 f7       	brcc	.-10     	; 0xbac <strnlen_P+0x2>
 bb6:	80 95       	com	r24
 bb8:	90 95       	com	r25
 bba:	8e 0f       	add	r24, r30
 bbc:	9f 1f       	adc	r25, r31
 bbe:	08 95       	ret

00000bc0 <strnlen>:
 bc0:	fc 01       	movw	r30, r24
 bc2:	61 50       	subi	r22, 0x01	; 1
 bc4:	70 40       	sbci	r23, 0x00	; 0
 bc6:	01 90       	ld	r0, Z+
 bc8:	01 10       	cpse	r0, r1
 bca:	d8 f7       	brcc	.-10     	; 0xbc2 <strnlen+0x2>
 bcc:	80 95       	com	r24
 bce:	90 95       	com	r25
 bd0:	8e 0f       	add	r24, r30
 bd2:	9f 1f       	adc	r25, r31
 bd4:	08 95       	ret

00000bd6 <fputc>:
 bd6:	0f 93       	push	r16
 bd8:	1f 93       	push	r17
 bda:	cf 93       	push	r28
 bdc:	df 93       	push	r29
 bde:	fb 01       	movw	r30, r22
 be0:	23 81       	ldd	r18, Z+3	; 0x03
 be2:	21 fd       	sbrc	r18, 1
 be4:	03 c0       	rjmp	.+6      	; 0xbec <fputc+0x16>
 be6:	8f ef       	ldi	r24, 0xFF	; 255
 be8:	9f ef       	ldi	r25, 0xFF	; 255
 bea:	2c c0       	rjmp	.+88     	; 0xc44 <fputc+0x6e>
 bec:	22 ff       	sbrs	r18, 2
 bee:	16 c0       	rjmp	.+44     	; 0xc1c <fputc+0x46>
 bf0:	46 81       	ldd	r20, Z+6	; 0x06
 bf2:	57 81       	ldd	r21, Z+7	; 0x07
 bf4:	24 81       	ldd	r18, Z+4	; 0x04
 bf6:	35 81       	ldd	r19, Z+5	; 0x05
 bf8:	42 17       	cp	r20, r18
 bfa:	53 07       	cpc	r21, r19
 bfc:	44 f4       	brge	.+16     	; 0xc0e <fputc+0x38>
 bfe:	a0 81       	ld	r26, Z
 c00:	b1 81       	ldd	r27, Z+1	; 0x01
 c02:	9d 01       	movw	r18, r26
 c04:	2f 5f       	subi	r18, 0xFF	; 255
 c06:	3f 4f       	sbci	r19, 0xFF	; 255
 c08:	31 83       	std	Z+1, r19	; 0x01
 c0a:	20 83       	st	Z, r18
 c0c:	8c 93       	st	X, r24
 c0e:	26 81       	ldd	r18, Z+6	; 0x06
 c10:	37 81       	ldd	r19, Z+7	; 0x07
 c12:	2f 5f       	subi	r18, 0xFF	; 255
 c14:	3f 4f       	sbci	r19, 0xFF	; 255
 c16:	37 83       	std	Z+7, r19	; 0x07
 c18:	26 83       	std	Z+6, r18	; 0x06
 c1a:	14 c0       	rjmp	.+40     	; 0xc44 <fputc+0x6e>
 c1c:	8b 01       	movw	r16, r22
 c1e:	ec 01       	movw	r28, r24
 c20:	fb 01       	movw	r30, r22
 c22:	00 84       	ldd	r0, Z+8	; 0x08
 c24:	f1 85       	ldd	r31, Z+9	; 0x09
 c26:	e0 2d       	mov	r30, r0
 c28:	09 95       	icall
 c2a:	89 2b       	or	r24, r25
 c2c:	e1 f6       	brne	.-72     	; 0xbe6 <fputc+0x10>
 c2e:	d8 01       	movw	r26, r16
 c30:	16 96       	adiw	r26, 0x06	; 6
 c32:	8d 91       	ld	r24, X+
 c34:	9c 91       	ld	r25, X
 c36:	17 97       	sbiw	r26, 0x07	; 7
 c38:	01 96       	adiw	r24, 0x01	; 1
 c3a:	17 96       	adiw	r26, 0x07	; 7
 c3c:	9c 93       	st	X, r25
 c3e:	8e 93       	st	-X, r24
 c40:	16 97       	sbiw	r26, 0x06	; 6
 c42:	ce 01       	movw	r24, r28
 c44:	df 91       	pop	r29
 c46:	cf 91       	pop	r28
 c48:	1f 91       	pop	r17
 c4a:	0f 91       	pop	r16
 c4c:	08 95       	ret

00000c4e <__ultoa_invert>:
 c4e:	fa 01       	movw	r30, r20
 c50:	aa 27       	eor	r26, r26
 c52:	28 30       	cpi	r18, 0x08	; 8
 c54:	51 f1       	breq	.+84     	; 0xcaa <__ultoa_invert+0x5c>
 c56:	20 31       	cpi	r18, 0x10	; 16
 c58:	81 f1       	breq	.+96     	; 0xcba <__ultoa_invert+0x6c>
 c5a:	e8 94       	clt
 c5c:	6f 93       	push	r22
 c5e:	6e 7f       	andi	r22, 0xFE	; 254
 c60:	6e 5f       	subi	r22, 0xFE	; 254
 c62:	7f 4f       	sbci	r23, 0xFF	; 255
 c64:	8f 4f       	sbci	r24, 0xFF	; 255
 c66:	9f 4f       	sbci	r25, 0xFF	; 255
 c68:	af 4f       	sbci	r26, 0xFF	; 255
 c6a:	b1 e0       	ldi	r27, 0x01	; 1
 c6c:	3e d0       	rcall	.+124    	; 0xcea <__ultoa_invert+0x9c>
 c6e:	b4 e0       	ldi	r27, 0x04	; 4
 c70:	3c d0       	rcall	.+120    	; 0xcea <__ultoa_invert+0x9c>
 c72:	67 0f       	add	r22, r23
 c74:	78 1f       	adc	r23, r24
 c76:	89 1f       	adc	r24, r25
 c78:	9a 1f       	adc	r25, r26
 c7a:	a1 1d       	adc	r26, r1
 c7c:	68 0f       	add	r22, r24
 c7e:	79 1f       	adc	r23, r25
 c80:	8a 1f       	adc	r24, r26
 c82:	91 1d       	adc	r25, r1
 c84:	a1 1d       	adc	r26, r1
 c86:	6a 0f       	add	r22, r26
 c88:	71 1d       	adc	r23, r1
 c8a:	81 1d       	adc	r24, r1
 c8c:	91 1d       	adc	r25, r1
 c8e:	a1 1d       	adc	r26, r1
 c90:	20 d0       	rcall	.+64     	; 0xcd2 <__ultoa_invert+0x84>
 c92:	09 f4       	brne	.+2      	; 0xc96 <__ultoa_invert+0x48>
 c94:	68 94       	set
 c96:	3f 91       	pop	r19
 c98:	2a e0       	ldi	r18, 0x0A	; 10
 c9a:	26 9f       	mul	r18, r22
 c9c:	11 24       	eor	r1, r1
 c9e:	30 19       	sub	r19, r0
 ca0:	30 5d       	subi	r19, 0xD0	; 208
 ca2:	31 93       	st	Z+, r19
 ca4:	de f6       	brtc	.-74     	; 0xc5c <__ultoa_invert+0xe>
 ca6:	cf 01       	movw	r24, r30
 ca8:	08 95       	ret
 caa:	46 2f       	mov	r20, r22
 cac:	47 70       	andi	r20, 0x07	; 7
 cae:	40 5d       	subi	r20, 0xD0	; 208
 cb0:	41 93       	st	Z+, r20
 cb2:	b3 e0       	ldi	r27, 0x03	; 3
 cb4:	0f d0       	rcall	.+30     	; 0xcd4 <__ultoa_invert+0x86>
 cb6:	c9 f7       	brne	.-14     	; 0xcaa <__ultoa_invert+0x5c>
 cb8:	f6 cf       	rjmp	.-20     	; 0xca6 <__ultoa_invert+0x58>
 cba:	46 2f       	mov	r20, r22
 cbc:	4f 70       	andi	r20, 0x0F	; 15
 cbe:	40 5d       	subi	r20, 0xD0	; 208
 cc0:	4a 33       	cpi	r20, 0x3A	; 58
 cc2:	18 f0       	brcs	.+6      	; 0xcca <__ultoa_invert+0x7c>
 cc4:	49 5d       	subi	r20, 0xD9	; 217
 cc6:	31 fd       	sbrc	r19, 1
 cc8:	40 52       	subi	r20, 0x20	; 32
 cca:	41 93       	st	Z+, r20
 ccc:	02 d0       	rcall	.+4      	; 0xcd2 <__ultoa_invert+0x84>
 cce:	a9 f7       	brne	.-22     	; 0xcba <__ultoa_invert+0x6c>
 cd0:	ea cf       	rjmp	.-44     	; 0xca6 <__ultoa_invert+0x58>
 cd2:	b4 e0       	ldi	r27, 0x04	; 4
 cd4:	a6 95       	lsr	r26
 cd6:	97 95       	ror	r25
 cd8:	87 95       	ror	r24
 cda:	77 95       	ror	r23
 cdc:	67 95       	ror	r22
 cde:	ba 95       	dec	r27
 ce0:	c9 f7       	brne	.-14     	; 0xcd4 <__ultoa_invert+0x86>
 ce2:	00 97       	sbiw	r24, 0x00	; 0
 ce4:	61 05       	cpc	r22, r1
 ce6:	71 05       	cpc	r23, r1
 ce8:	08 95       	ret
 cea:	9b 01       	movw	r18, r22
 cec:	ac 01       	movw	r20, r24
 cee:	0a 2e       	mov	r0, r26
 cf0:	06 94       	lsr	r0
 cf2:	57 95       	ror	r21
 cf4:	47 95       	ror	r20
 cf6:	37 95       	ror	r19
 cf8:	27 95       	ror	r18
 cfa:	ba 95       	dec	r27
 cfc:	c9 f7       	brne	.-14     	; 0xcf0 <__ultoa_invert+0xa2>
 cfe:	62 0f       	add	r22, r18
 d00:	73 1f       	adc	r23, r19
 d02:	84 1f       	adc	r24, r20
 d04:	95 1f       	adc	r25, r21
 d06:	a0 1d       	adc	r26, r0
 d08:	08 95       	ret

00000d0a <__prologue_saves__>:
 d0a:	2f 92       	push	r2
 d0c:	3f 92       	push	r3
 d0e:	4f 92       	push	r4
 d10:	5f 92       	push	r5
 d12:	6f 92       	push	r6
 d14:	7f 92       	push	r7
 d16:	8f 92       	push	r8
 d18:	9f 92       	push	r9
 d1a:	af 92       	push	r10
 d1c:	bf 92       	push	r11
 d1e:	cf 92       	push	r12
 d20:	df 92       	push	r13
 d22:	ef 92       	push	r14
 d24:	ff 92       	push	r15
 d26:	0f 93       	push	r16
 d28:	1f 93       	push	r17
 d2a:	cf 93       	push	r28
 d2c:	df 93       	push	r29
 d2e:	cd b7       	in	r28, 0x3d	; 61
 d30:	de b7       	in	r29, 0x3e	; 62
 d32:	ca 1b       	sub	r28, r26
 d34:	db 0b       	sbc	r29, r27
 d36:	0f b6       	in	r0, 0x3f	; 63
 d38:	f8 94       	cli
 d3a:	de bf       	out	0x3e, r29	; 62
 d3c:	0f be       	out	0x3f, r0	; 63
 d3e:	cd bf       	out	0x3d, r28	; 61
 d40:	09 94       	ijmp

00000d42 <__epilogue_restores__>:
 d42:	2a 88       	ldd	r2, Y+18	; 0x12
 d44:	39 88       	ldd	r3, Y+17	; 0x11
 d46:	48 88       	ldd	r4, Y+16	; 0x10
 d48:	5f 84       	ldd	r5, Y+15	; 0x0f
 d4a:	6e 84       	ldd	r6, Y+14	; 0x0e
 d4c:	7d 84       	ldd	r7, Y+13	; 0x0d
 d4e:	8c 84       	ldd	r8, Y+12	; 0x0c
 d50:	9b 84       	ldd	r9, Y+11	; 0x0b
 d52:	aa 84       	ldd	r10, Y+10	; 0x0a
 d54:	b9 84       	ldd	r11, Y+9	; 0x09
 d56:	c8 84       	ldd	r12, Y+8	; 0x08
 d58:	df 80       	ldd	r13, Y+7	; 0x07
 d5a:	ee 80       	ldd	r14, Y+6	; 0x06
 d5c:	fd 80       	ldd	r15, Y+5	; 0x05
 d5e:	0c 81       	ldd	r16, Y+4	; 0x04
 d60:	1b 81       	ldd	r17, Y+3	; 0x03
 d62:	aa 81       	ldd	r26, Y+2	; 0x02
 d64:	b9 81       	ldd	r27, Y+1	; 0x01
 d66:	ce 0f       	add	r28, r30
 d68:	d1 1d       	adc	r29, r1
 d6a:	0f b6       	in	r0, 0x3f	; 63
 d6c:	f8 94       	cli
 d6e:	de bf       	out	0x3e, r29	; 62
 d70:	0f be       	out	0x3f, r0	; 63
 d72:	cd bf       	out	0x3d, r28	; 61
 d74:	ed 01       	movw	r28, r26
 d76:	08 95       	ret

00000d78 <_exit>:
 d78:	f8 94       	cli

00000d7a <__stop_program>:
 d7a:	ff cf       	rjmp	.-2      	; 0xd7a <__stop_program>
